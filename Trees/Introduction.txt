* Trees:->It is like similar to the stacks and queues to use the information.
* This contain the key,left_adress,right_address. where the address is represented by the pointer.
* If it is not pointing to any address then it is assigned with the pointer.
* Tree which has atmost 2 children is called the binary tree.
* declaration of tree Node
struct Node
{
int key;
Node* left_address;
Node* right_address;
};
###################################################################################################################################
* Incase of binary tree we will have the atmost 2 children for every node.
* we will be having the various levels in the tree starts with level 1, level 2, level 3.
* level starts with 1.
* maximum number of nodes at level = 2^(level-1).
* types of binary tree:
1.Perfect binary tree.->All the nodes are filled with exactly 2 children.
2.Full binary tree.->call f0ll(binary tree nodes has 0 or 2 children).
3.Complete binary tree.->All the nodes are filled with 2 children except the leaf nodes.
#####################################################################################################################################
THere are two types are traversal in binary tree:
1.Breadth First traversal->Also known as the level order traversal.
In this we will use the queue. we will parse through the levels.we will put the top element of tree into queue . we will pop the element
and add the left and right address of the head to the queue.
2.Depth First Traversal->  In this we use the recursion has the three traversals.
1. In order traversal.-> visit left,head,right.
2.Pre order traversal.-> visit head, left,right.
3. Post order traversal.->visit left,right,head.
#remember we never start with right.
#######################################################################################################################################
* To find the maximum element in the tree visit the right most element of the tree.
* To find the minimum element in the tree visit the left most element of the tree.
#######################################################################################################################################
