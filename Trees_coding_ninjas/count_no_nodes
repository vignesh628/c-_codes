#include <iostream>
#include <queue>
using namespace std;
template <typename T>
class BinaryTreeNode {
    public : 
    T data;
    BinaryTreeNode<T> *left;
    BinaryTreeNode<T> *right;

    BinaryTreeNode(T data) {
        this -> data = data;
        left = NULL;
        right = NULL;
    }
};

void print_levelwise(BinaryTreeNode<int>* root)
{
    queue<BinaryTreeNode<int>*>q;
    q.push(root);
    while(!q.empty())
    {
      BinaryTreeNode<int>* front =q.front();
      q.pop();
      cout<<front->data<<":";
      if(front->left!=NULL)
      {
      cout<<"L"<<front->left->data<<",";
      q.push(front->left);
      }
      if(front->right!=NULL)
      {
      cout<<"R"<<front->right->data;
      q.push(front->right);
      }
      cout<<endl;
    }
}

BinaryTreeNode<int>* takeInput() {
    int rootData;
    //cout << "Enter root data : ";
    cin >> rootData;
    if(rootData == -1) {
        return NULL;
    }
    BinaryTreeNode<int> *root = new BinaryTreeNode<int>(rootData);
    queue<BinaryTreeNode<int>*> q;
    q.push(root);
    while(!q.empty()) {
        BinaryTreeNode<int> *currentNode = q.front();
	q.pop();
        int leftChild, rightChild;
        //cout << "Enter left child of " << currentNode -> data << " : ";
        cin >> leftChild;
        if(leftChild != -1) {
            BinaryTreeNode<int>* leftNode = new BinaryTreeNode<int>(leftChild);
            currentNode -> left =leftNode;
            q.push(leftNode);
        }
        //cout << "Enter right child of " << currentNode -> data << " : ";
        cin >> rightChild;
        if(rightChild != -1) {
            BinaryTreeNode<int>* rightNode = new BinaryTreeNode<int>(rightChild);
            currentNode -> right =rightNode;
            q.push(rightNode);
        }
    }
    return root;
}
int count_nodes(BinaryTreeNode<int>* root)
{
    int count=1;
    if(root->left!=NULL)
    {
      count=count+count_nodes(root->left);  
    }
    if(root->right!=NULL)
    {
      count=count+count_nodes(root->right);  
    }
    return count;
}
int main() {
    BinaryTreeNode<int>* root = takeInput();
    print_levelwise(root);
    int value=count_nodes(root);
    cout<<" the count is "<<value<<endl;
    
}
#############################################################################################################################
input:
8 3 10 1 6 -1 14 -1 -1 4 7 13 -1 -1 -1 -1 -1 -1 -1
output:
8:L3,R10
3:L1,R6
10:R14
1:
6:L4,R7
14:L13,
4:
7:
13:
 the count is 9
#################################################################################################################################
https://ide.geeksforgeeks.org/xbucClf9xw
