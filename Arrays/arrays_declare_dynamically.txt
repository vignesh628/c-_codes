* decalring the array dynamically.
v is the number of vertices.
int v;
int *a=new int[v]; //iani ->Node *head=new Node(); //int a=new int[v];
this we create the array of size v which means that we created the array that can store the v elements.
Dynamically allocating the array means decalration of the array at run time.
#######################################################################################################################################
* declaring the linkedlists dynamically.
list<int> *a=new list<int>[v];
This means that we are making the array of the linked lists.
This will be used generally when we are using the graphs creating with the v vertices. 
#######################################################################################################################################
* The differnt ways of declaring the arrays :
@ If you already have the input.
 char name[]='vignesh';
 int value[]={0,1,2,3,4};
@ IF you know the size of the array:
 char name[10];
 int value[10];
@ Creating the array dynamically:
 int *arr=new int[10];
 char *name=new char[10];
######################################################################################################################################
3 ways of decalring dynamically  using new:
int *value;
int *value=new int(); @ this will be used if you have the multiple members inside that.
int *value=new int[n];@ this will be used when you are allocating the memory.
####################################################################################################################################
